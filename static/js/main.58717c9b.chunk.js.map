{"version":3,"sources":["util.js","InfoBox.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["sortData","data","sort","a","b","cases","formatNumbers","number","toString","replace","InfoBox","classname","title","total","className","Table","countries","map","key","country","src","countryInfo","flag","width","alt","todayCases","active","todayRecovered","recovered","deaths","population","App","useState","setCountries","setCountry","setCountryInfo","tableData","setTableData","useEffect","fetch","then","response","json","name","value","iso2","sortedData","getCountriesData","console","log","onCountryChange","event","countryCode","target","url","onChange","items","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58717c9b.chunk.js","sourcesContent":["export const sortData = function(data){\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (b.cases - a.cases));\r\n}\r\n\r\nexport const formatNumbers = (number) => (number >= 0)? `${number}`.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : \"Loading..\" ;","import React from 'react';\r\nimport {formatNumbers} from './util';\r\n\r\nfunction InfoBox({classname, title, cases, total}) {\r\n\r\n    let casesFormated = (cases >= 0)? `+${cases}`.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : \"Loading..\";\r\n    let totalCasesFormated = (total >= 0)? `+${total}`.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : \"Loading..\";\r\n\r\n    return (\r\n        <div className=\"col-sm-4\">\r\n            <div className={classname}>\r\n                <p>{title}</p>\r\n                <h3>+{formatNumbers(cases)}</h3>\r\n                <p>Total: {formatNumbers(total)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport {formatNumbers} from './util';\r\n\r\nfunction Table({countries}) {    \r\n    return (\r\n        <div className=\"table-responsive\">\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Flat</th>\r\n                        <th>Country</th>\r\n                        <th className=\"text-right\">Total Cases</th>\r\n                        <th className=\"text-right\">Active Cases</th>\r\n                        <th className=\"text-right\">Total Recovered</th>\r\n                        <th className=\"text-right\">Total Deaths</th>\r\n                        <th className=\"text-right\">Population</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {countries.map((data) => (\r\n                        <tr key={data.country}>\r\n                            <td><img src={data.countryInfo.flag} width=\"30px\" alt=\"\"/></td>\r\n                            <td>{data.country}</td>\r\n                            <td className=\"text-right\"><small className=\"text-red\">+{formatNumbers(data.todayCases)}</small> <br/> {formatNumbers(data.cases)}</td>\r\n                            <td className=\"text-right\">{formatNumbers(data.active)}</td>\r\n                            <td className=\"text-right\"><small className=\"text-green\">+{formatNumbers(data.todayRecovered)}</small> <br/> {formatNumbers(data.recovered)}</td>\r\n                            <td className=\"text-right\">{formatNumbers(data.deaths)}</td>\r\n                            <td className=\"text-right\">{formatNumbers(data.population)}</td>\r\n                        </tr>\r\n                    ))}      \r\n                </tbody>              \r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {useEffect, useState} from 'react';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport {sortData} from './util';\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([\"Worldwide\"]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  },[]);\n\n  useEffect(()=> {\n    const getCountriesData = async () => {\n      fetch('https://disease.sh/v3/covid-19/countries')\n      .then(response => response.json())\n      .then(data => {\n        const countries = data.map((country)=>(\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n      });\n    }\n    getCountriesData();\n  },[]);\n  console.log(tableData);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = (countryCode === \"Worldwide\") ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n    })\n  }\n\n  return (\n    <div className=\"body\">\n      <div className=\"page-header\">\n        <h1>Worldwide Covid-19 Stats</h1>\n      </div>\n      <div className=\"container\">\n        <div className=\"app\">\n          <div className=\"app_header\">\n            <h3>Covid 19 Tracker <small className=\"text-muted\">(Updated every 10mins)</small></h3>\n            <form>\n              <select className=\"form-control\" onChange={onCountryChange}>\n                <option value=\"Worldwide\">Worldwide</option>\n                {countries.map((items)=><option value={items.value}>{items.name}</option>)}\n              </select>\n            </form>\n          </div>\n\n          <div className=\"app_stats\">\n            <div className=\"row\">\n              <InfoBox classname=\"card total-cases\" title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases}/>\n              <InfoBox classname=\"card total-recovered\" title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n              <InfoBox classname=\"card total-deaths\" title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n            </div>\n          </div>\n\n          <br /><hr /><br />\n\n          <div className=\"app_data\">\n            <h3>Full list of Cases by Country <small className=\"text-muted\">(Updated every 1hr)</small></h3>\n            <br/>\n            <Table countries={tableData} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}